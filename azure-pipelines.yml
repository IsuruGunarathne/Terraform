# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
      - "*"
  paths:
    exclude:
      - README.md # Assuming README.md is not modified frequently

pr:
  branches:
    include:
      - "*"

pool:
  vmImage: ubuntu-latest

jobs:
  - job: "terraformInitAndPlan"
    steps:
      - script: |
          echo "Checking terraform"
          terraform -version

        displayName: "Checking for installed terraform version"

      - script: |
          echo Add other tasks to build, test, and deploy your project.
          echo "Installing Terraform"
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

          terraform -version

        displayName: "Installing terraform"

      - script: |
          echo "Setting up Azure CLI"
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
          az account set --subscription $(subscriptionId)
          echo "Azure CLI setup complete"

        displayName: "Setting up Azure CLI"

      - script: |
          echo "Setting up Terraform environment variables"
          export ARM_CLIENT_ID=$(servicePrincipalId)
          export ARM_CLIENT_SECRET=$(servicePrincipalKey)
          export ARM_SUBSCRIPTION_ID=$(subscriptionId)
          export ARM_TENANT_ID=$(tenantId)
          echo "Terraform environment variables set"
          echo "Planning Terraform"
          cd Azure
          terraform init
          echo "Terrform initialized"
          echo "Planning Terraform"
          terraform plan -out=tfplan
          echo "Terraform planned"
          # publish tfplan to use later
          echo "##vso[task.setvariable variable=tfplan]$(pwd)/tfplan"

        displayName: "Initializing terraform and Planning"

  - job: waitForValidation
    dependsOn: terraformInitAndPlan
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: "4320" # job times out in 3 days
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            $(userEmail)
          instructions: "Please validate the build configuration and resume"
          onTimeout: "resume"

  - job: terraformApply
    dependsOn: waitForValidation
    steps:
      - script: |
          echo "Setting up Terraform environment variables"
          export ARM_CLIENT_ID=$(servicePrincipalId)
          export ARM_CLIENT_SECRET=$(servicePrincipalKey)
          export ARM_SUBSCRIPTION_ID=$(subscriptionId)
          export ARM_TENANT_ID=$(tenantId)
          cd Azure
          terraform init
          echo "Terraform environment variables set"
          echo "Applying Terraform"
          # get tfplan from previous job
          terraform apply -auto-approve $(tfplan)
          echo "Terraform applied"

        displayName: "Applying Terraform"
