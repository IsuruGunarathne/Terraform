# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
      - "*"
  paths:
    exclude:
      - README.md # Assuming README.md is not modified frequently

pr:
  branches:
    include:
      - "*"

resources:
  repositories:
    - repository: Terraform-configs
      type: github
      name: IsuruGunarathne/Terraform-configs
      endpoint: github.com_IsuruGunarathne

pool:
  vmImage: ubuntu-latest

stages:
  - stage: plan
    displayName: "Terraform"
    jobs:
      - job: "terraformInitAndPlan"
        steps:
          - checkout: self
          - checkout: Terraform-configs

          - script: |
              echo "Checking terraform"
              terraform -version

            displayName: "Checking for installed terraform version"

          - script: |
              if  ! command -v terraform &> /dev/null
              then
                  echo "Terraform could not be found"
                  echo "Installing Terraform"
                  wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                  sudo apt update && sudo apt install terraform
              else
                  echo "Terraform is already installed"
              fi
              terraform -version

            displayName: "Installing terraform"

          # - script: |
          #     echo "Setting up Azure CLI"
          #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          #     az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
          #     az account set --subscription $(subscriptionId)
          #     echo "Azure CLI setup complete"

          #   displayName: "Setting up Azure CLI"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              echo "all"
              ls
              echo ""
              echo ""
              echo "config repo"
              ls Terraform-configs
              echo ""
              echo ""
              echo "Terraform repo"
              ls Terraform
            displayName: "listing content of config repo"

          - script: |
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              echo "Planning Terraform"
              cd Terraform/Azure
              terraform init
              echo "Terrform initialized"
              echo "Planning Terraform"
              terraform plan -out=tfplan
              echo "Terraform planned"
            displayName: "Initializing terraform and Planning"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/Terraform/Azure/tfplan"
              artifact: "tfplan"
            displayName: "Plublish tfplan"

      - job: waitForValidation
        dependsOn: terraformInitAndPlan
        displayName: Wait for external validation
        pool: server
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                $(userEmail)
              instructions: "Please validate the build configuration and resume"
              onTimeout: "resume"

      - job: terraformApply
        dependsOn: waitForValidation
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "tfplan"
              targetPath: "$(System.DefaultWorkingDirectory)/Terraform/Azure/"
            displayName: "Download tfplan"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              echo "Setting up Terraform environment variables"
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              cd Terraform/Azure
              terraform init
              echo "Terraform environment variables set"
              echo "Applying Terraform"
              terraform apply tfplan
              echo "Terraform applied"

            displayName: "Applying Terraform"
