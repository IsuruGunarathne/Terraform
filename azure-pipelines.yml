# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
      - "*"
  paths:
    exclude:
      - README.md # Assuming README.md is not modified frequently

pr:
  branches:
    include:
      - "*"

resources:
  repositories:
    - repository: Terraform-configs
      type: github
      name: IsuruGunarathne/Terraform-configs
      endpoint: github.com_IsuruGunarathne

pool:
  vmImage: ubuntu-latest

stages:
  - stage: plan
    displayName: "Terraform"
    jobs:
      - job: "terraformInitAndPlan"
        steps:
          - checkout: self
          - checkout: Terraform-configs

          - script: |
              echo "Checking terraform"
              terraform -version

            displayName: "Checking for installed terraform version"

          - script: |
              if  ! command -v terraform &> /dev/null
              then
                  echo "Terraform could not be found"
                  echo "Installing Terraform"
                  wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                  sudo apt update && sudo apt install terraform
              else
                  echo "Terraform is already installed"
              fi
              terraform -version

            displayName: "Installing terraform"

          # - script: |
          #     echo "Setting up Azure CLI"
          #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          #     az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
          #     az account set --subscription $(subscriptionId)
          #     echo "Azure CLI setup complete"

          #   displayName: "Setting up Azure CLI"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

                # check if the terraform state file exists in Azure blob storage and download it if it exists
                check = $(az storage blob exists --container-name terraform-state --name terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey) --query 'exists')
                echo az storage blob exists --container-name terraform-state --name terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey) --query 'exists'
                echo "Check: $check"
                if [ $check == "true" ]
                then
                  az storage blob download --container-name terraform-state --name terraform.tfstate --file $(System.DefaultWorkingDirectory)/Terraform/Azure/terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey)
                fi

              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              echo "all"
              ls
              echo ""
              echo ""
              echo "config repo"
              ls Terraform-configs
              echo ""
              echo ""
              echo "Terraform repo"
              ls Terraform
              cp Terraform-configs/Azure/conf.auto.tfvars Terraform/Azure
            displayName: "listing content of config repo"

          - script: |
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              echo "Planning Terraform"
              cd Terraform/Azure
              # check tf state list
              echo "current tf state list"
              terraform state list
              echo ""
              terraform init
              ls
              # check tf state list
              echo "current tf state list"
              terraform state list
              echo ""
              echo "Terrform initialized"
              echo "Planning Terraform"
              terraform plan -out=tfplan
              terraform plan > planout.txt
              echo "Terraform planned"
            displayName: "Initializing terraform and Planning"

          # - task: PublishPipelineArtifact@1
          #   inputs:
          #     targetPath: "$(System.DefaultWorkingDirectory)/Terraform/Azure/tfplan"
          #     artifact: "tfplan"
          #   displayName: "Plublish tfplan"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Uploading plan file to Azure blob storage"
                az storage blob upload --container-name terraform-plans --file $(System.DefaultWorkingDirectory)/Terraform/Azure/planout.txt --name $(Build.BuildId)-planout.txt --account-name charindutisurug --account-key $(storageAccountKey)
                az storage blob upload --container-name terraform-plans --file $(System.DefaultWorkingDirectory)/Terraform/Azure/tfplan --name $(Build.BuildId)-tfplan --account-name charindutisurug --account-key $(storageAccountKey)
                echo "Plan file uploaded"
              addSpnToEnvironment: true
            displayName: "Azure login"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/Terraform/Azure/planout.txt"
              artifact: "planout.txt"
            displayName: "Plublish planout.txt"

      - job: waitForValidation
        dependsOn: terraformInitAndPlan
        displayName: Wait for external validation
        pool: server
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                $(userEmail)
              instructions: "visit the Azure DevOps pipeline and validate the terraform plan, link: https://portal.azure.com/#view/Microsoft_Azure_Storage/ContainerMenuBlade/~/overview/storageAccountId/%2Fsubscriptions%2F38785beb-5019-4896-8679-3d41ddacc4b1%2FresourceGroups%2Frnd-charindut-isuru%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcharindutisurug/path/terraform-plans/etag/%220x8DC70BE4CA6E466%22/defaultEncryptionScope/%24account-encryption-key/denyEncryptionScopeOverride~/false/defaultId//publicAccessVal/None"
              onTimeout: "resume"

      - job: terraformApply
        dependsOn: waitForValidation
        steps:
          - checkout: self
          - checkout: Terraform-configs

          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     artifactName: "tfplan"
          #     targetPath: "$(System.DefaultWorkingDirectory)/Terraform/Azure/"
          #   displayName: "Download tfplan"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

                # get the plan file from Azure blob storage
                az storage blob download --container-name terraform-plans --name $(Build.BuildId)-tfplan --file $(System.DefaultWorkingDirectory)/Terraform/Azure/tfplan --account-name charindutisurug --account-key $(storageAccountKey)
                az storage blob download --container-name terraform-plans --name $(Build.BuildId)-planout.txt --file $(System.DefaultWorkingDirectory)/Terraform/Azure/planout.txt --account-name charindutisurug --account-key $(storageAccountKey)

                # check if the terraform state file exists in Azure blob storage and download it if it exists
                check = $(az storage blob exists --container-name terraform-state --name terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey) --query 'exists')
                echo "Check: $check"
                if [ $check == "true" ]
                then
                  az storage blob download --container-name terraform-state --name terraform.tfstate --file $(System.DefaultWorkingDirectory)/Terraform/Azure/terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey)
                fi
                ls
              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              echo "Setting up Terraform environment variables"
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              cd Terraform/Azure
              # check tf state list
              echo "current tf state list"
              terraform state list
              echo ""
              terraform init
              ls
              # check tf state list
              echo "current tf state list"
              terraform state list
              echo ""
              echo "Terraform environment variables set"
              echo "Applying Terraform"
              terraform apply tfplan
              echo "Terraform applied"

            displayName: "Applying Terraform"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # remove tfplan file and planout.txt file from Azure blob storage
                az storage blob delete --container-name terraform-plans --name $(Build.BuildId)-tfplan --account-name charindutisurug --account-key $(storageAccountKey)
                az storage blob delete --container-name terraform-plans --name $(Build.BuildId)-planout.txt --account-name charindutisurug --account-key $(storageAccountKey)

                # store the terraform state file in Azure blob storage
                az storage blob upload --container-name terraform-state --file $(System.DefaultWorkingDirectory)/Terraform/Azure/terraform.tfstate --name terraform.tfstate --account-name charindutisurug --account-key $(storageAccountKey)
              addSpnToEnvironment: true
            displayName: "Deleting plan files from Azure blob storage"
